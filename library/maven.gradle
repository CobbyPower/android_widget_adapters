apply plugin: 'maven'

/**
 * Maven configuration =============================================================================
 */
afterEvaluate { project ->
    /**
     * Uploads project's artifacts into the local maven repository.
     * <p>
     * This will also generate a POM file.
     */
    uploadArchives {
        repositories.mavenDeployer {
            repository(url: 'file:///' + String.valueOf(project.property('maven.url.local')))
            /**
             * Project artifact ------------------------------------------------------------------------
             */
            pom.groupId = 'com.wit.android'
            pom.artifactId = project.property('maven.pom.artifactId')
            pom.version = project.property('maven.pom.version')
            pom.packaging = project.property('maven.pom.packaging')
            /**
             * Project description ---------------------------------------------------------------------
             */
            pom.project {
                name = project.property('maven.pom.project.name')
                description = project.property('maven.pom.project.description')
                url project.property('maven.pom.project.url')
                inceptionYear project.property('maven.pom.project.inceptionYear')
                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                organization {
                    name = 'Wolf-ITechnologies'
                    url = 'https://github.com/Wolf-ITechnologies'
                }
                developers {
                    developer {
                        name = 'Martin Albedinsky'
                        email 'martin.albedinsky@gmail.com'
                        organization = 'Wolf-ITechnologies'
                        roles {
                            role 'Android Designer &ampersand; Developer'
                        }
                    }
                }
            }
        }
    }

    /**
     * Generates javadoc documentation for the current project.
     */
    //noinspection GroovyAssignabilityCheck
    task generateJavadoc(type: Javadoc) {
        source android.sourceSets.main.java.sourceFiles
        options {
            author = true
            memberLevel = JavadocMemberLevel.PROTECTED
            header = project.property('maven.pom.project.name') + ' ' + project.property('maven.pom.version') + ' Documentation'
            linksOffline 'http://developer.android.com/reference', '${android.sdkDirectory}/docs/reference'
        }
        if (JavaVersion.current().isJava8Compatible()) {
            // Uncomment this when Javadoc tool outputs some (not resolvable) errors like 'reference not found for R.attr#...'.
            // options.addStringOption('Xdoclint:none', '-quiet')
        }
        final Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        final String sdkDir = properties.getProperty('sdk.dir')
        // Append class path with dependencies.
        classpath += files(
                android.getBootClasspath(),
                sdkDir + '/extras/android/m2repository/com/android/support/support-annotations/' + project.property('android.support.version') + '/support-annotations-' + project.property('android.support.version') + '.jar'
        )
    }

    /**
     * Bundles project's Javadoc into a .jar! file.
     */
    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        description 'Bundles Javadoc into a .jar! file.'
        from generateJavadoc
    }

    /**
     * Bundles project's Raw sources into a .jar! file.
     */
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        description 'Bundles Raw sources into a .jar! file.'
        from android.sourceSets.main.java.sourceFiles
        // Uncomment if this project contains res/ folder.
        // from android.sourceSets.main.res.sourceFiles
    }

    /**
     * Set of artifacts to be generated.
     */
    artifacts {
        archives javadocJar
        archives sourcesJar
    }
}